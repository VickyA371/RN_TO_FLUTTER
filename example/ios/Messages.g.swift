// Autogenerated from Pigeon (v17.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

extension FlutterError: Swift.Error {}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterCounterApiProtocol {
  func setText(text textArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func setJson(json jsonArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func setScreen(screen screenArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func setClicks(value valueArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func setTheme(theme themeArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class FlutterCounterApi: FlutterCounterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  func setText(text textArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_login_sdk.FlutterCounterApi.setText"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([textArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func setJson(json jsonArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_login_sdk.FlutterCounterApi.setJson"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([jsonArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func setScreen(screen screenArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_login_sdk.FlutterCounterApi.setScreen"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([screenArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func setClicks(value valueArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_login_sdk.FlutterCounterApi.setClicks"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([valueArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func setTheme(theme themeArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_login_sdk.FlutterCounterApi.setTheme"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([themeArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostCounterApi {
  func setText(text: String) throws
  func setJson(json: String) throws
  func setScreen(screen: String) throws
  func setClicks(value: Int64) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostCounterApiSetup {
  /// The codec used by HostCounterApi.
  /// Sets up an instance of `HostCounterApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HostCounterApi?) {
    let setTextChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_login_sdk.HostCounterApi.setText", binaryMessenger: binaryMessenger)
    if let api = api {
      setTextChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textArg = args[0] as! String
        do {
          try api.setText(text: textArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setTextChannel.setMessageHandler(nil)
    }
    let setJsonChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_login_sdk.HostCounterApi.setJson", binaryMessenger: binaryMessenger)
    if let api = api {
      setJsonChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let jsonArg = args[0] as! String
        do {
          try api.setJson(json: jsonArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setJsonChannel.setMessageHandler(nil)
    }
    let setScreenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_login_sdk.HostCounterApi.setScreen", binaryMessenger: binaryMessenger)
    if let api = api {
      setScreenChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let screenArg = args[0] as! String
        do {
          try api.setScreen(screen: screenArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setScreenChannel.setMessageHandler(nil)
    }
    let setClicksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_login_sdk.HostCounterApi.setClicks", binaryMessenger: binaryMessenger)
    if let api = api {
      setClicksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.setClicks(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setClicksChannel.setMessageHandler(nil)
    }
  }
}
